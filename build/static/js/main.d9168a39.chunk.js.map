{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","noteToUpdate","find","changedNote","updatedNote","catch","error","setTimeout","n","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","createdNote","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9168a39.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n      <li className=\"note\">\r\n          {note.content}\r\n          <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\nexport default Note;","const Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import axios from 'axios'\r\n// App deplyed at https://fso-part3-lesson-backend.herokuapp.com/\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n","const Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    noteService\n      .getAll() // getAll returns a promise that takes a lambda that returns notes\n      .then(initialNotes => { // promise passes notes to then\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  /********************** Handlers ***********************/\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    console.log(`importance of ${id} needs to be toggled`)\n    const noteToUpdate = notes.find(note => note.id === id)\n    const changedNote = {\n      ...noteToUpdate,\n      important: !noteToUpdate.important\n    }\n    noteService\n      .update(id, changedNote)\n      .then(updatedNote => {\n        // if note is not the updated one, just copy it\n        // else insert updated response note\n        setNotes(notes.map(note => note.id !== id ? note : updatedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `the note '${noteToUpdate.content}' was already deleted from server`\n        )\n        setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        // delete nonexisting note from notes\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      // id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then(createdNote => {\n        setNotes(notes.concat(createdNote))\n        setNewNote('')\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n            key={note.id} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n      <Footer />\n    </div>\n    )\n  }\n\nexport default App;","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App/>, document.getElementById('root')\n)"],"sourceRoot":""}